# coding: utf-8

"""
    Respeecher API

    API for interacting with Respeecher services, including key and session management, and calibration functionalities.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from respeecher.models.recording_list_response import RecordingListResponse

class TestRecordingListResponse(unittest.TestCase):
    """RecordingListResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RecordingListResponse:
        """Test RecordingListResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RecordingListResponse`
        """
        model = RecordingListResponse()
        if include_optional:
            return RecordingListResponse(
                list = [
                    respeecher.models.recording.Recording(
                        id = '', 
                        project_id = '', 
                        parent_folder_id = '', 
                        type = '', 
                        url = '', 
                        waveform_url = '', 
                        file_name = '', 
                        label = '', 
                        state = '', 
                        original_id = '', 
                        model_id = '', 
                        model_name = '', 
                        voice_id = '', 
                        voice_name = '', 
                        accent_id = '', 
                        accent_name = '', 
                        narration_style_id = '', 
                        narration_style_name = '', 
                        semitones_correction = 1.337, 
                        calibration_id = '', 
                        calibration_value = '', 
                        calibration_name = '', 
                        microphone = '', 
                        size = 56, 
                        duration = 1.337, 
                        starred = True, 
                        tts = True, 
                        tts_voice = '', 
                        tts_voice_id = '', 
                        text = '', 
                        params = { }, 
                        error = '', 
                        active = True, 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        converted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        listen_count = 56, 
                        process_stage = '', 
                        note = '', 
                        transaction_id = '', 
                        moderation = respeecher.models.recording_moderation.Recording_moderation(
                            state = '', 
                            error = '', 
                            language = '', 
                            has_violations = True, ), )
                    ],
                pagination = respeecher.models.project_list_response_pagination.ProjectListResponse_pagination(
                    count = 56, 
                    limit = 56, 
                    offset = 56, )
            )
        else:
            return RecordingListResponse(
        )
        """

    def testRecordingListResponse(self):
        """Test RecordingListResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
