# coding: utf-8

"""
    Respeecher API

    API for interacting with Respeecher services, including key and session management, and calibration functionalities.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from respeecher.models.voices_list_response import VoicesListResponse

class TestVoicesListResponse(unittest.TestCase):
    """VoicesListResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> VoicesListResponse:
        """Test VoicesListResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `VoicesListResponse`
        """
        model = VoicesListResponse()
        if include_optional:
            return VoicesListResponse(
                list = [
                    respeecher.models.voice.Voice(
                        id = '', 
                        owner_id = '', 
                        name = '', 
                        slug = '', 
                        visibility = '', 
                        species = '', 
                        artist = '', 
                        verified_artist = True, 
                        gender = '', 
                        pitch = 1.337, 
                        age_group = '', 
                        pitch_group = '', 
                        nationality = '', 
                        image_url = '', 
                        thumbnail_url = '', 
                        description = '', 
                        rating = 56, 
                        active = True, 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        favorite = True, 
                        available = True, 
                        accents = [
                            respeecher.models.accent.Accent(
                                id = '', 
                                is_default = True, 
                                native = True, 
                                info = respeecher.models.accent_info.Accent_info(
                                    name = '', 
                                    short_name = '', 
                                    locale = '', ), 
                                tiers = [
                                    respeecher.models.tier.Tier(
                                        name = '', )
                                    ], 
                                available = True, 
                                settings = respeecher.models.settings.settings(), )
                            ], 
                        narration_styles = [
                            None
                            ], 
                        tiers = [
                            respeecher.models.tier.Tier(
                                name = '', )
                            ], )
                    ],
                pagination = respeecher.models.pagination.Pagination(
                    count = 56, 
                    limit = 56, 
                    offset = 56, )
            )
        else:
            return VoicesListResponse(
        )
        """

    def testVoicesListResponse(self):
        """Test VoicesListResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
