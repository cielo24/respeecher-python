# coding: utf-8

"""
    Respeecher API

    API for interacting with Respeecher services, including key and session management, and calibration functionalities.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from respeecher.api.default_api import DefaultApi


class TestDefaultApi(unittest.TestCase):
    """DefaultApi unit test stubs"""

    def setUp(self) -> None:
        self.api = DefaultApi()

    def tearDown(self) -> None:
        pass

    def test_create_calibration(self) -> None:
        """Test case for create_calibration

        Create a new Calibration
        """
        pass

    def test_create_folder(self) -> None:
        """Test case for create_folder

        Create a folder
        """
        pass

    def test_create_note(self) -> None:
        """Test case for create_note

        Create a note associated with a recording
        """
        pass

    def test_create_order(self) -> None:
        """Test case for create_order

        Create a conversion order
        """
        pass

    def test_create_original_recording(self) -> None:
        """Test case for create_original_recording

        Create an original recording
        """
        pass

    def test_create_project(self) -> None:
        """Test case for create_project

        Create a new project
        """
        pass

    def test_create_tts_recording(self) -> None:
        """Test case for create_tts_recording

        Create an original text-to-speech recording
        """
        pass

    def test_delete_api_key(self) -> None:
        """Test case for delete_api_key

        Delete the API key associated with your account
        """
        pass

    def test_delete_calibration(self) -> None:
        """Test case for delete_calibration

        Delete a calibration
        """
        pass

    def test_delete_folder(self) -> None:
        """Test case for delete_folder

        Delete a folder
        """
        pass

    def test_delete_note(self) -> None:
        """Test case for delete_note

        Delete a note
        """
        pass

    def test_delete_project(self) -> None:
        """Test case for delete_project

        Delete a project
        """
        pass

    def test_delete_recording(self) -> None:
        """Test case for delete_recording

        Delete a recording
        """
        pass

    def test_download_file(self) -> None:
        """Test case for download_file

        Download file
        """
        pass

    def test_enable_calibration(self) -> None:
        """Test case for enable_calibration

        Set a calibration as the default enabled calibration
        """
        pass

    def test_export_project(self) -> None:
        """Test case for export_project

        Export a project
        """
        pass

    def test_favorite_voice(self) -> None:
        """Test case for favorite_voice

        Mark a voice as a favorite
        """
        pass

    def test_generate_api_key(self) -> None:
        """Test case for generate_api_key

        Generate a new API key
        """
        pass

    def test_get_accent_samples(self) -> None:
        """Test case for get_accent_samples

        Get samples available for an accent
        """
        pass

    def test_get_account_statistics(self) -> None:
        """Test case for get_account_statistics

        Get the statistics for your account
        """
        pass

    def test_get_calibration(self) -> None:
        """Test case for get_calibration

        Get a calibration by its ID
        """
        pass

    def test_get_credits(self) -> None:
        """Test case for get_credits

        Get the credits available to your account
        """
        pass

    def test_get_folder_by_id(self) -> None:
        """Test case for get_folder_by_id

        Get a folder by its ID
        """
        pass

    def test_get_folders_statistics(self) -> None:
        """Test case for get_folders_statistics

        Get statistics for a list of folders
        """
        pass

    def test_get_project_by_url(self) -> None:
        """Test case for get_project_by_url

        Get a project by its URL
        """
        pass

    def test_get_projects_statistics(self) -> None:
        """Test case for get_projects_statistics

        Get statistics for a list of projects
        """
        pass

    def test_get_recording_by_id(self) -> None:
        """Test case for get_recording_by_id

        Get a recording by its ID
        """
        pass

    def test_list_calibrations(self) -> None:
        """Test case for list_calibrations

        Get a list of calibrations associated with your account
        """
        pass

    def test_list_conversions(self) -> None:
        """Test case for list_conversions

        Get a list of the conversions for an original recording
        """
        pass

    def test_list_folders(self) -> None:
        """Test case for list_folders

        Get a list of the folders in a project
        """
        pass

    def test_list_original_recordings(self) -> None:
        """Test case for list_original_recordings

        Get a list of the original recordings in a folder
        """
        pass

    def test_list_projects(self) -> None:
        """Test case for list_projects

        Get a list of your projects
        """
        pass

    def test_list_recordings(self) -> None:
        """Test case for list_recordings

        Get a list of recordings for a specified folder or project
        """
        pass

    def test_list_tts_voices(self) -> None:
        """Test case for list_tts_voices

        Get a list of the available TTS voices
        """
        pass

    def test_list_voices(self) -> None:
        """Test case for list_voices

        Get a list of the voices available
        """
        pass

    def test_login(self) -> None:
        """Test case for login

        Log in to an account and start a new session
        """
        pass

    def test_logout(self) -> None:
        """Test case for logout

        End your session
        """
        pass

    def test_rename_folder(self) -> None:
        """Test case for rename_folder

        Rename a folder
        """
        pass

    def test_retry_order_v2(self) -> None:
        """Test case for retry_order_v2

        Retry a conversion order for a specific original
        """
        pass

    def test_search_voices(self) -> None:
        """Test case for search_voices

        Search for a voice by its name
        """
        pass

    def test_set_voice_settings(self) -> None:
        """Test case for set_voice_settings

        Set the settings for a voice
        """
        pass

    def test_update_note(self) -> None:
        """Test case for update_note

        Update a note
        """
        pass

    def test_update_project(self) -> None:
        """Test case for update_project

        Change the name of a project
        """
        pass

    def test_update_recording(self) -> None:
        """Test case for update_recording

        Update a recording
        """
        pass


if __name__ == '__main__':
    unittest.main()
