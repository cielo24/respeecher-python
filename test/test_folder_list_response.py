# coding: utf-8

"""
    Respeecher API

    API for interacting with Respeecher services, including key and session management, and calibration functionalities.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from respeecher.models.folder_list_response import FolderListResponse

class TestFolderListResponse(unittest.TestCase):
    """FolderListResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FolderListResponse:
        """Test FolderListResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FolderListResponse`
        """
        model = FolderListResponse()
        if include_optional:
            return FolderListResponse(
                list = [
                    respeecher.models.folder.Folder(
                        name = '', 
                        slug = '', 
                        owner = '', 
                        url = '', 
                        models = { }, 
                        id = '', 
                        active = True, 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        last_recording_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                pagination = respeecher.models.pagination.Pagination(
                    count = 56, 
                    limit = 56, 
                    offset = 56, )
            )
        else:
            return FolderListResponse(
        )
        """

    def testFolderListResponse(self):
        """Test FolderListResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
