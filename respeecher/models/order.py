# coding: utf-8

"""
    Respeecher API

    API for interacting with Respeecher services, including key and session management, and calibration functionalities.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Order(BaseModel):
    """
    Order
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the conversion order.")
    user_id: Optional[StrictStr] = Field(default=None, description="The user identifier associated with the order.")
    original_id: Optional[StrictStr] = Field(default=None, description="Identifier for the original recording or file.")
    conversion_id: Optional[StrictStr] = Field(default=None, description="Identifier for the conversion operation.")
    transaction_id: Optional[StrictStr] = Field(default=None, description="Transaction identifier associated with the order (if applicable).")
    moderation_id: Optional[StrictStr] = Field(default=None, description="Moderation identifier associated with the order (if applicable).")
    calibration_id: Optional[StrictStr] = Field(default=None, description="Calibration identifier used in the conversion process (if applicable).")
    tracking_id: Optional[StrictStr] = Field(default=None, description="Tracking identifier for the order.")
    f0: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Fundamental frequency adjustment applied to the conversion (if any).")
    state: Optional[StrictStr] = Field(default=None, description="The current state of the conversion order.")
    created_at: Optional[datetime] = Field(default=None, description="Timestamp when the order was created.")
    closed_at: Optional[datetime] = Field(default=None, description="Timestamp when the order was closed (if applicable).")
    error: Optional[StrictStr] = Field(default=None, description="Error message related to the order (if any).")
    __properties: ClassVar[List[str]] = ["id", "user_id", "original_id", "conversion_id", "transaction_id", "moderation_id", "calibration_id", "tracking_id", "f0", "state", "created_at", "closed_at", "error"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Order from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if transaction_id (nullable) is None
        # and model_fields_set contains the field
        if self.transaction_id is None and "transaction_id" in self.model_fields_set:
            _dict['transaction_id'] = None

        # set to None if moderation_id (nullable) is None
        # and model_fields_set contains the field
        if self.moderation_id is None and "moderation_id" in self.model_fields_set:
            _dict['moderation_id'] = None

        # set to None if calibration_id (nullable) is None
        # and model_fields_set contains the field
        if self.calibration_id is None and "calibration_id" in self.model_fields_set:
            _dict['calibration_id'] = None

        # set to None if f0 (nullable) is None
        # and model_fields_set contains the field
        if self.f0 is None and "f0" in self.model_fields_set:
            _dict['f0'] = None

        # set to None if closed_at (nullable) is None
        # and model_fields_set contains the field
        if self.closed_at is None and "closed_at" in self.model_fields_set:
            _dict['closed_at'] = None

        # set to None if error (nullable) is None
        # and model_fields_set contains the field
        if self.error is None and "error" in self.model_fields_set:
            _dict['error'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Order from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "user_id": obj.get("user_id"),
            "original_id": obj.get("original_id"),
            "conversion_id": obj.get("conversion_id"),
            "transaction_id": obj.get("transaction_id"),
            "moderation_id": obj.get("moderation_id"),
            "calibration_id": obj.get("calibration_id"),
            "tracking_id": obj.get("tracking_id"),
            "f0": obj.get("f0"),
            "state": obj.get("state"),
            "created_at": obj.get("created_at"),
            "closed_at": obj.get("closed_at"),
            "error": obj.get("error")
        })
        return _obj


