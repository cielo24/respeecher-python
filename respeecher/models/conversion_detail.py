# coding: utf-8

"""
    Respeecher API

    API for interacting with Respeecher services, including key and session management, and calibration functionalities.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ConversionDetail(BaseModel):
    """
    ConversionDetail
    """ # noqa: E501
    voice_id: Optional[StrictStr] = Field(default=None, description="The ID of the voice to use for the conversion.")
    narration_style_id: Optional[StrictStr] = Field(default=None, description="The ID of the narration style to use, if applicable.")
    accent_id: Optional[StrictStr] = Field(default=None, description="The ID of the accent to use, if applicable.")
    semitones_correction: Optional[StrictInt] = Field(default=None, description="The number of semitones to shift the converted output to.")
    label: Optional[StrictStr] = Field(default=None, description="A label to identify the conversion.")
    __properties: ClassVar[List[str]] = ["voice_id", "narration_style_id", "accent_id", "semitones_correction", "label"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConversionDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if narration_style_id (nullable) is None
        # and model_fields_set contains the field
        if self.narration_style_id is None and "narration_style_id" in self.model_fields_set:
            _dict['narration_style_id'] = None

        # set to None if accent_id (nullable) is None
        # and model_fields_set contains the field
        if self.accent_id is None and "accent_id" in self.model_fields_set:
            _dict['accent_id'] = None

        # set to None if semitones_correction (nullable) is None
        # and model_fields_set contains the field
        if self.semitones_correction is None and "semitones_correction" in self.model_fields_set:
            _dict['semitones_correction'] = None

        # set to None if label (nullable) is None
        # and model_fields_set contains the field
        if self.label is None and "label" in self.model_fields_set:
            _dict['label'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConversionDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "voice_id": obj.get("voice_id"),
            "narration_style_id": obj.get("narration_style_id"),
            "accent_id": obj.get("accent_id"),
            "semitones_correction": obj.get("semitones_correction"),
            "label": obj.get("label")
        })
        return _obj


